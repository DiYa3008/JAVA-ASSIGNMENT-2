package javaAssignment;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
public class GymApp 
{
    private static final Scanner scanner = new Scanner(System.in);
    private static final DateTimeFormatter DF = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    private static final Map<Integer, Member> members = new HashMap<>();
    private static final Map<Integer, Trainer> trainers = new HashMap<>();
    private static final Map<Integer, Plan> plans = new HashMap<>();
    private static final Map<Integer, Subscription> subscriptions = new HashMap<>();
    private static final Map<Integer, Invoice> invoices = new HashMap<>();
    private static final Map<Integer, Payment> payments = new HashMap<>();
    private static final Map<Integer, List<AttendanceRecord>> attendance = new HashMap<>();
    public static void main(String[] args) {
        seedSampleData();
        while (true) {
            printMenu();
            int choice = readInt("Choose option: ", 1, 9);
            switch (choice) {
                case 1 -> addMember();
                case 2 -> addPlan();
                case 3 -> startOrRenewSubscription();
                case 4 -> recordAttendance();
                case 5 -> generateInvoice();
                case 6 -> recordPayment();
                case 7 -> displayMembers();
                case 8 -> displayAttendanceSummary();
                case 9 -> { System.out.println("Exiting. Goodbye!"); return; }
                default -> System.out.println("Invalid option.");
            }
            System.out.println();
        }
    }
    private static void printMenu() {
        System.out.println("=== Gym Membership & Billing System ===");
        System.out.println("1. Add Member");
        System.out.println("2. Add Plan");
        System.out.println("3. Start or Renew Subscription");
        System.out.println("4. Record Attendance");
        System.out.println("5. Generate Invoice");
        System.out.println("6. Record Payment");
        System.out.println("7. Display Members & Subscriptions");
        System.out.println("8. Display Attendance Summary");
        System.out.println("9. Exit");
    }
    private static void addMember() {
        System.out.println("Add Member:");
        String name = readNonEmptyString("Name: ");
        String phone = readNonEmptyString("Phone: ");
        String email = readNonEmptyString("Email: ");
        Member m = new Member(name, phone, email);
        members.put(m.getId(), m);
        System.out.println("Added: " + m);
    }
    private static void addPlan() {
        System.out.println("Add Plan:");
        String name = readNonEmptyString("Plan name (e.g., Monthly, Quarterly, Yearly): ");
        int durationDays = readInt("Duration in days (e.g., 30 for monthly): ", 1, 3650);
        double price = readDouble("Price (in INR): ", 0.0, 1_000_000.0);
        double penaltyPercent = readDouble("Late renewal penalty percent (e.g., 10 for 10%): ", 0.0, 100.0);
        Plan p = new Plan(name, durationDays, price, penaltyPercent);
        plans.put(p.getId(), p);
        System.out.println("Added Plan: " + p);
    }
    private static void startOrRenewSubscription() {
        System.out.println("Start or Renew Subscription:");
        if (members.isEmpty()) { System.out.println("No members exist. Add members first."); return; }
        if (plans.isEmpty()) { System.out.println("No plans exist. Add plans first."); return; }
        Member member = chooseMember();
        Plan plan = choosePlan();
        Subscription existing = findActiveSubscriptionForMember(member);
        LocalDate today = LocalDate.now();
        if (existing == null || !existing.isActiveOn(today)) {
            boolean wasExpired = (existing != null && !existing.isActiveOn(today));
            if (wasExpired) {
                System.out.println("Subscription was expired. A late penalty may apply per plan policy.");
            }
            Subscription sub = new Subscription(member, plan, today);
            subscriptions.put(sub.getId(), sub);
            attendance.putIfAbsent(member.getId(), new ArrayList<>());
            System.out.printf("Subscription started for member %s. Valid until %s%n", member.getName(), sub.getEndDate().format(DF));
            System.out.println("Note: Generate invoice next (menu option 5) before recording payment.");
        } else {
            System.out.println("Member has an active subscription. Renewing will extend from existing end date " + existing.getEndDate().format(DF));
            existing.renew();
            System.out.printf("Subscription renewed. New validity: %s - %s%n", existing.getStartDate().format(DF), existing.getEndDate().format(DF));
        }
    }
    private static void recordAttendance() {
        System.out.println("Record Attendance:");
        if (members.isEmpty()) { System.out.println("No members."); return; }
        Member member = chooseMember();
        LocalDate date = readDate("Attendance date (yyyy-MM-dd) [leave blank for today]: ", true);
        if (date == null) date = LocalDate.now();
        Subscription active = findActiveSubscriptionForMember(member);
        if (active == null || !active.isActiveOn(date)) {
            System.out.println("Cannot record attendance: member does not have an active subscription on " + date.format(DF));
            return;
        }
        String notes = readString("Notes (optional): ");
        AttendanceRecord ar = new AttendanceRecord(member, date, notes);
        attendance.computeIfAbsent(member.getId(), k -> new ArrayList<>()).add(ar);
        System.out.println("Attendance recorded: " + ar);
    }
    private static void generateInvoice() {
        System.out.println("Generate Invoice:");
        if (subscriptions.isEmpty()) { System.out.println("No subscriptions exist."); return; }
        Subscription sub = chooseSubscription();
        Invoice inv = Invoice.createForSubscription(sub);
        invoices.put(inv.getId(), inv);
        System.out.println("Invoice generated:");
        System.out.println(inv.detailedString());
    }
    private static void recordPayment() {
        System.out.println("Record Payment:");
        if (invoices.isEmpty()) { System.out.println("No invoices exist. Generate an invoice first."); return; }
        Invoice invoice = chooseInvoice();
        if (invoice.isPaid()) {
            System.out.println("Invoice already paid.");
            return;
        }
        double amountDue = invoice.getTotal() - invoice.getAmountPaid();
        System.out.printf("Amount due: %.2f%n", amountDue);
        double amount = readDouble(String.format("Enter payment amount (<= %.2f): ", amountDue), 0.01, amountDue);
        String method = readNonEmptyString("Payment method (Cash/Card/UPI): ");
        Payment p = new Payment(invoice, amount, LocalDate.now(), method);
        payments.put(p.getId(), p);
        invoice.applyPayment(p);
        System.out.println("Payment recorded: " + p);
        System.out.println("Updated invoice status:");
        System.out.println(invoice.detailedString());
    }
    private static void displayMembers() {
        System.out.println("Members & Subscriptions:");
        if (members.isEmpty()) { System.out.println("No members."); return; }
        for (Member m : members.values()) {
            System.out.println(m);
            Subscription s = findActiveSubscriptionForMember(m);
            if (s != null) {
                System.out.println("  Active subscription: " + s.briefString());
            } else {
                System.out.println("  No active subscription.");
            }
            List<Invoice> invs = invoicesForMember(m);
            if (!invs.isEmpty()) {
                System.out.println("  Invoices:");
                for (Invoice inv : invs) {
                    System.out.printf("    %s - Paid: %s - Total: %.2f%n", inv.briefString(), inv.isPaid() ? "YES" : "NO", inv.getTotal());
                }
            }
        }
    }
    private static void displayAttendanceSummary() {
        System.out.println("Attendance Summary per Member:");
        if (attendance.isEmpty()) { System.out.println("No attendance records."); return; }
        for (Member m : members.values()) {
            List<AttendanceRecord> list = attendance.getOrDefault(m.getId(), Collections.emptyList());
            if (list.isEmpty()) continue;
            System.out.printf("%s (%d records):%n", m.getName(), list.size());
            // show last 5 entries
            list.stream()
                    .sorted(Comparator.comparing(AttendanceRecord::getDate).reversed())
                    .limit(10)
                    .forEach(ar -> System.out.printf("  %s - %s%n", ar.getDate().format(DF), ar.getNotes()));
        }
    }
    private static Member chooseMember() {
        while (true) {
            System.out.println("Members:");
            members.values().forEach(m -> System.out.printf("  %d) %s%n", m.getId(), m));
            int id = readInt("Enter member id: ", Integer.MIN_VALUE, Integer.MAX_VALUE);
            if (members.containsKey(id)) return members.get(id);
            System.out.println("Invalid member id. Try again.");
        }
    }
    private static Plan choosePlan() {
        while (true) {
            System.out.println("Plans:");
            plans.values().forEach(p -> System.out.printf("  %d) %s%n", p.getId(), p));
            int id = readInt("Enter plan id: ", Integer.MIN_VALUE, Integer.MAX_VALUE);
            if (plans.containsKey(id)) return plans.get(id);
            System.out.println("Invalid plan id. Try again.");
        }
    }
    private static Subscription chooseSubscription() {
        while (true) {
            System.out.println("Subscriptions:");
            subscriptions.values().forEach(s -> System.out.printf("  %d) %s%n", s.getId(), s.briefString()));
            int id = readInt("Enter subscription id: ", Integer.MIN_VALUE, Integer.MAX_VALUE);
            if (subscriptions.containsKey(id)) return subscriptions.get(id);
            System.out.println("Invalid subscription id.");
        }
    }

    private static Invoice chooseInvoice() {
        while (true) {
            System.out.println("Invoices:");
            invoices.values().forEach(i -> System.out.printf("  %d) %s%n", i.getId(), i.briefString()));
            int id = readInt("Enter invoice id: ", Integer.MIN_VALUE, Integer.MAX_VALUE);
            if (invoices.containsKey(id)) return invoices.get(id);
            System.out.println("Invalid invoice id.");
        }
    }
    private static Subscription findActiveSubscriptionForMember(Member m) {
        LocalDate today = LocalDate.now();
        return subscriptions.values().stream()
                .filter(s -> s.getMember().equals(m))
                .max(Comparator.comparing(Subscription::getEndDate))
                .filter(s -> s.isActiveOn(today))
                .orElse(null);
    }
    private static List<Invoice> invoicesForMember(Member m) {
        List<Invoice> list = new ArrayList<>();
        for (Invoice inv : invoices.values()) {
            if (inv.getSubscription().getMember().equals(m)) list.add(inv);
        }
        list.sort(Comparator.comparing(Invoice::getCreatedAt).reversed());
        return list;
    }
    private static int readInt(String prompt, int min, int max) {
        while (true) {
            System.out.print(prompt);
            String line = scanner.nextLine().trim();
            try {
                int v = Integer.parseInt(line);
                if (v < min || v > max) {
                    System.out.printf("Enter value between %d and %d%n", min, max);
                    continue;
                }
                return v;
            } catch (NumberFormatException e) {
                System.out.println("Invalid integer. Try again.");
            }
        }
    }
    private static double readDouble(String prompt, double min, double max) {
        while (true) {
            System.out.print(prompt);
            String line = scanner.nextLine().trim();
            try {
                double v = Double.parseDouble(line);
                if (v < min || v > max) {
                    System.out.printf("Enter value between %.2f and %.2f%n", min, max);
                    continue;
                }
                return v;
            } catch (NumberFormatException e) {
                System.out.println("Invalid decimal number. Try again.");
            }
        }
    }
    private static String readNonEmptyString(String prompt) {
        while (true) {
            System.out.print(prompt);
            String s = scanner.nextLine().trim();
            if (!s.isEmpty()) return s;
            System.out.println("Value cannot be empty.");
        }
    }
    private static String readString(String prompt) {
        System.out.print(prompt);
        return scanner.nextLine().trim();
    }
    private static String readNonEmptyName(String prompt) {
        return readNonEmptyString(prompt);
    }
    private static LocalDate readDate(String prompt, boolean allowBlank) {
        while (true) {
            System.out.print(prompt);
            String s = scanner.nextLine().trim();
            if (s.isEmpty() && allowBlank) return null;
            try {
                return LocalDate.parse(s, DF);
            } catch (Exception e) {
                System.out.println("Invalid date format. Use yyyy-MM-dd.");
            }
        }
    }
    private static void seedSampleData() { 
        Plan monthly = new Plan("Monthly", 30, 1200.0, 10.0);
        Plan quarterly = new Plan("Quarterly", 90, 3300.0, 8.0);
        Plan yearly = new Plan("Yearly", 365, 12000.0, 5.0);
        plans.put(monthly.getId(), monthly);
        plans.put(quarterly.getId(), quarterly);
        plans.put(yearly.getId(), yearly);
        Trainer t = new Trainer("Ana", "9876543210");
        trainers.put(t.getId(), t);
        Member m1 = new Member("Sita Ram", "9000000001", "sita@example.com");
        Member m2 = new Member("Rahul Kumar", "9000000002", "rahul@example.com");
        members.put(m1.getId(), m1);
        members.put(m2.getId(), m2);
        Subscription s1 = new Subscription(m1, monthly, LocalDate.now().minusDays(5)); // started 5 days ago
        subscriptions.put(s1.getId(), s1);
        attendance.put(m1.getId(), new ArrayList<>());
    }
    static class Member {
        private static int counter = 1;
        private final int id;
        private String name;
        private String phone;
        private String email;
        public Member(String name, String phone, String email) {
            this.id = counter++;
            this.name = name;
            this.phone = phone;
            this.email = email;
        }
        public int getId() { return id; }
        public String getName() { return name; }
        public String getPhone() { return phone; }
        public String getEmail() { return email; }

        public void setName(String name) { this.name = name; }
        public void setPhone(String phone) { this.phone = phone; }
        public void setEmail(String email) { this.email = email; }
        public String toString() {
            return String.format("%s (ID:%d, %s, %s)", name, id, phone, email);
        }
        public boolean equals(Object o) {
            if (!(o instanceof Member)) return false;
            return ((Member)o).id == this.id;
        }
        public int hashCode() { return Objects.hash(id); }
    }
    static class Trainer {
        private static int counter = 1;
        private final int id;
        private String name;
        private String phone;
        public Trainer(String name, String phone) {
            this.id = counter++;
            this.name = name;
            this.phone = phone;
        }
        public int getId() { return id; }
        public String getName() { return name; }

        public String toString() {
            return String.format("%s (ID:%d, %s)", name, id, phone);
        }
    }
    static class Plan {
        private static int counter = 1;
        private final int id;
        private String name;
        private int durationDays;
        private double price;
        private double penaltyPercent; 
        public Plan(String name, int durationDays, double price, double penaltyPercent) {
            this.id = counter++;
            this.name = name;
            this.durationDays = durationDays;
            this.price = price;
            this.penaltyPercent = penaltyPercent;
        }
        public int getId() { return id; }
        public String getName() { return name; }
        public int getDurationDays() { return durationDays; }
        public double getPrice() { return price; }
        public double getPenaltyPercent() { return penaltyPercent; }
        public String toString() {
            return String.format("%s (ID:%d) - %d days - Price: %.2f - Penalty: %.1f%%", name, id, durationDays, price, penaltyPercent);
        }
    }
    static class Subscription {
        private static int counter = 1;
        private final int id;
        private final Member member;
        private final Plan plan;
        private LocalDate startDate;
        private LocalDate endDate;
        private boolean active;
        public Subscription(Member member, Plan plan, LocalDate startDate) {
            this.id = counter++;
            this.member = member;
            this.plan = plan;
            this.startDate = startDate;
            this.endDate = startDate.plusDays(plan.getDurationDays() - 1);
            this.active = true;
        }
        public int getId() { return id; }
        public Member getMember() { return member; }
        public Plan getPlan() { return plan; }
        public LocalDate getStartDate() { return startDate; }
        public LocalDate getEndDate() { return endDate; }
        public boolean isActive() { return active; }
        public boolean isActiveOn(LocalDate date) {
            return (date != null) && !date.isBefore(startDate) && !date.isAfter(endDate);
        }
        public void renew() {
            if (isActiveOn(LocalDate.now())) {
                LocalDate newStart = endDate.plusDays(1);
                LocalDate newEnd = newStart.plusDays(plan.getDurationDays() - 1);
                this.endDate = newEnd;
            } else {
                this.startDate = LocalDate.now();
                this.endDate = startDate.plusDays(plan.getDurationDays() - 1);
                this.active = true;
            }
        }
        public String briefString() {
            return String.format("Subscription[id=%d, plan=%s, member=%s, %s - %s]", id, plan.getName(), member.getName(), startDate.format(DF), endDate.format(DF));
        }
        public String toString() {
            return briefString();
        }
    }
    static class AttendanceRecord {
        private static int counter = 1;
        private final int id;
        private final Member member;
        private final LocalDate date;
        private final String notes;
        public AttendanceRecord(Member member, LocalDate date, String notes) {
            this.id = counter++;
            this.member = member;
            this.date = date;
            this.notes = (notes == null || notes.isEmpty()) ? "-" : notes;
        }
        public int getId() { return id; }
        public Member getMember() { return member; }
        public LocalDate getDate() { return date; }
        public String getNotes() { return notes; }
        public String toString() {
            return String.format("Attendance[id=%d, member=%s, date=%s, notes=%s]", id, member.getName(), date.format(DF), notes);
        }
    }
    static class Invoice {
        private static int counter = 1;
        private final int id;
        private final Subscription subscription;
        private final LocalDate createdAt;
        private final double subtotal;
        private final double taxPercent;
        private final double penalty;
        private double amountPaid;
        private static final double DEFAULT_TAX_PERCENT = 18.0;
        private Invoice(Subscription subscription, double subtotal, double penalty, double taxPercent) {
            this.id = counter++;
            this.subscription = subscription;
            this.createdAt = LocalDate.now();
            this.subtotal = subtotal;
            this.penalty = penalty;
            this.taxPercent = taxPercent;
            this.amountPaid = 0.0;
        }
        public static Invoice createForSubscription(Subscription s) {
            double price = s.getPlan().getPrice();
            double penalty = 0.0;
            LocalDate today = LocalDate.now();
            boolean expired = !s.isActiveOn(today); 
            if (expired) {
                penalty = price * (s.getPlan().getPenaltyPercent() / 100.0);
            } 
            double subtotal = price;
            return new Invoice(s, subtotal, penalty, DEFAULT_TAX_PERCENT);
        }
        public int getId() { return id; }
        public Subscription getSubscription() { return subscription; }
        public LocalDate getCreatedAt() { return createdAt; }
        public double getSubtotal() { return subtotal; }
        public double getTaxPercent() { return taxPercent; }
        public double getPenalty() { return penalty; }
        public double getAmountPaid() { return amountPaid; }
        public double getTaxAmount() {
            return (subtotal + penalty) * taxPercent / 100.0;
        }
        public double getTotal() {
            return subtotal + penalty + getTaxAmount();
        }
        public double getAmountDue() {
            return getTotal() - amountPaid;
        }
        public boolean isPaid() {
            return Math.abs(getAmountDue()) < 0.0001;
        }
        public void applyPayment(Payment p) {
            this.amountPaid += p.getAmount();
        }
        public String briefString() {
            return String.format("Invoice[id=%d, member=%s, plan=%s, total=%.2f, paid=%.2f, created=%s]", id, subscription.getMember().getName(), subscription.getPlan().getName(), getTotal(), amountPaid, createdAt.format(DF));
        }
        public String detailedString() {
            return String.format(
                    "Invoice ID: %d%nMember: %s%nPlan: %s%nCycle: %s - %s%nSubtotal: %.2f%nPenalty: %.2f%nTax (%.1f%%): %.2f%nTotal: %.2f%nAmount Paid: %.2f%nStatus: %s",
                    id,
                    subscription.getMember().getName(),
                    subscription.getPlan().getName(),
                    subscription.getStartDate().format(DF), subscription.getEndDate().format(DF),
                    subtotal,
                    penalty,
                    taxPercent,
                    getTaxAmount(),
                    getTotal(),
                    amountPaid,
                    isPaid() ? "PAID" : "UNPAID"
            );
        }
        public String toString() {
            return briefString();
        }
    }
    static class Payment {
        private static int counter = 1;
        private final int id;
        private final Invoice invoice;
        private final double amount;
        private final LocalDate date;
        private final String method;
        public Payment(Invoice invoice, double amount, LocalDate date, String method) {
            this.id = counter++;
            this.invoice = invoice;
            this.amount = amount;
            this.date = date;
            this.method = method;
        }
        public int getId() { return id; }
        public Invoice getInvoice() { return invoice; }
        public double getAmount() { return amount; }
        public LocalDate getDate() { return date; }
        public String getMethod() { return method; }
        public String toString() {
            return String.format("Payment[id=%d, invoiceId=%d, amount=%.2f, date=%s, method=%s]", id, invoice.getId(), amount, date.format(DF), method);
        }
    }
}
